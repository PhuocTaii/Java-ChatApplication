/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.btv.gui;

import com.btv.newSwing.ScrollBar;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Vo Quoc Binh
 */
public class Spam extends javax.swing.JPanel {

    String query = "";
    String queryOrder = "";

    public Spam() {
        initComponents();
        testData(tableSpams);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundSpams = new javax.swing.JPanel();
        titleSpams = new javax.swing.JLabel();
        spamScrollPane = new javax.swing.JScrollPane();
        tableSpams = new com.btv.newSwing.TableCustom();
        jLabel2 = new javax.swing.JLabel();
        comboBoxSpams = new com.btv.newSwing.ComboboxCustom();
        comboBoxOrderSpams = new com.btv.newSwing.ComboboxCustom();

        setOpaque(false);

        backgroundSpams.setBackground(new java.awt.Color(237, 237, 237));
        backgroundSpams.setOpaque(false);
        backgroundSpams.setPreferredSize(new java.awt.Dimension(1080, 768));

        titleSpams.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        titleSpams.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleSpams.setText("SPAMS");

        tableSpams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "Time report", "Report user", "Lock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spamScrollPane.setViewportView(tableSpams);

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel2.setText("Filtered by");

        comboBoxSpams.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ID", "Name", "Time report", "Reported user", "Lock" }));
        comboBoxSpams.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSpamsItemStateChanged(evt);
            }
        });
        comboBoxSpams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSpamsActionPerformed(evt);
            }
        });

        comboBoxOrderSpams.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ASC", "DESC" }));
        comboBoxOrderSpams.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxOrderSpamsItemStateChanged(evt);
            }
        });
        comboBoxOrderSpams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxOrderSpamsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundSpamsLayout = new javax.swing.GroupLayout(backgroundSpams);
        backgroundSpams.setLayout(backgroundSpamsLayout);
        backgroundSpamsLayout.setHorizontalGroup(
            backgroundSpamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundSpamsLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(backgroundSpamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundSpamsLayout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(titleSpams, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(backgroundSpamsLayout.createSequentialGroup()
                        .addGroup(backgroundSpamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spamScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(backgroundSpamsLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(comboBoxSpams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(comboBoxOrderSpams, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 42, Short.MAX_VALUE))))
        );
        backgroundSpamsLayout.setVerticalGroup(
            backgroundSpamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundSpamsLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(titleSpams, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(backgroundSpamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxSpams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxOrderSpams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(spamScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(379, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(backgroundSpams, javax.swing.GroupLayout.PREFERRED_SIZE, 1082, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(backgroundSpams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxSpamsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSpamsItemStateChanged
        query = comboBoxSpams.getSelectedItem().toString();
        queryOrder = comboBoxOrderSpams.getSelectedItem().toString();

        filter(query, queryOrder);
    }//GEN-LAST:event_comboBoxSpamsItemStateChanged

    private void comboBoxSpamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSpamsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxSpamsActionPerformed

    private void comboBoxOrderSpamsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxOrderSpamsItemStateChanged
        query = comboBoxSpams.getSelectedItem().toString();
        queryOrder = comboBoxOrderSpams.getSelectedItem().toString();

        filter(query, queryOrder);
    }//GEN-LAST:event_comboBoxOrderSpamsItemStateChanged

    private void comboBoxOrderSpamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxOrderSpamsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxOrderSpamsActionPerformed

    
    private void testData(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        spamScrollPane.setVerticalScrollBar(new ScrollBar());
        
        model.addRow(new Object[]{1, "Chai", "Beverages", 18, true});
        model.addRow(new Object[]{2, "Chang", "Beverages", 19, false});
        model.addRow(new Object[]{3, "Aniseed Syrup", "Beverages", 18, true});
        model.addRow(new Object[]{4, "Chef Anton's Cajun Seasoning", "Beverages", 19, false});
        model.addRow(new Object[]{5, "Chef Anton's Gumbo Mix", "Beverages", 18, true});
        model.addRow(new Object[]{6, "Grandma's Boysenberry Spread", "Beverages", 19, false});
        model.addRow(new Object[]{7, "Uncle Bob's Organic Dried Pears", "Beverages", 18, true});
        model.addRow(new Object[]{8, "Northwoods Cranberry Sauce", "Beverages", 19, false});
        model.addRow(new Object[]{9, "Mishi Kobe Niku", "Beverages", 18, true});
        model.addRow(new Object[]{10, "Ikura", "Beverages", 19, false});
        model.addRow(new Object[]{11, "Queso Cabrales", "Beverages", 18, true});
        model.addRow(new Object[]{12, "Queso Manchego La Pastora", "Beverages", 19, false});
        model.addRow(new Object[]{13, "Konbu", "Beverages", 18, true});
        model.addRow(new Object[]{14, "Tofu", "Seafood", 19, false});
        model.addRow(new Object[]{15, "Genen Shouyu", "Seafood", 18, true});
        model.addRow(new Object[]{16, "Pavlova", "Seafood", 19, false});
        model.addRow(new Object[]{17, "Alice Mutton", "Seafood", 18, true});
        model.addRow(new Object[]{18, "Carnarvon Tigers", "Seafood", 19, false});
        model.addRow(new Object[]{19, "Teatime Chocolate Biscuits", "Seafood", 19, true});
        model.addRow(new Object[]{20, "Sir Rodney's Marmalade", "Seafood", 19, false});
        model.addRow(new Object[]{21, "Sir Rodney's Scones", "Seafood", 19, true});
        model.addRow(new Object[]{22, "Gustaf's Knäckebröd", "Seafood", 19, false});
        model.addRow(new Object[]{23, "Tunnbröd", "Seafood", 19, true});
        model.addRow(new Object[]{24, "Guaraná Fantástica", "Seafood", 19, false});
        model.addRow(new Object[]{25, "NuNuCa Nuß-Nougat-Creme", "Seafood", 19, true});
        model.addRow(new Object[]{26, "Gumbär Gummibärchen", "Seafood", 19, false});
        model.addRow(new Object[]{27, "Schoggi Schokolade", "Seafood", 19, true});
        model.addRow(new Object[]{28, "Rössle Sauerkraut", "Seafood", 19, false});
        model.addRow(new Object[]{29, "Thüringer Rostbratwurst", "Seafood", 19, true});
        model.addRow(new Object[]{30, "Nord-Ost Matjeshering", "Seafood", 19, false});
        model.addRow(new Object[]{31, "Gorgonzola Telino", "Seafood", 19, true});
        model.addRow(new Object[]{32, "Mascarpone Fabioli", "Seafood", 19, 39});
        model.addRow(new Object[]{33, "Geitost", "Seafood", 19, true});
        model.addRow(new Object[]{34, "Sasquatch Ale", "Seafood", 19, false});
        model.addRow(new Object[]{35, "Steeleye Stout", "Seafood", 19, true});
        model.addRow(new Object[]{36, "Inlagd Sill", "Seafood", 19, false});
        model.addRow(new Object[]{37, "Gravad lax", "Seafood", 19, true});
        model.addRow(new Object[]{38, "Côte de Blaye", "Seafood", 19, false});
        model.addRow(new Object[]{39, "Chartreuse verte", "Seafood", 19, true});
        model.addRow(new Object[]{40, "Boston Crab Meat", "Seafood", 19, false});
        model.addRow(new Object[]{41, "Jack's New England Clam Chowder", "Seafood", 19, true});
        model.addRow(new Object[]{42, "Singaporean Hokkien Fried Mee", "Seafood", 19, false});
        model.addRow(new Object[]{43, "Ipoh Coffee", "Seafood", 19, true});
    }
    
    public void filter(String query, String queryOrder) {
        
        int sortKey = 0;
        SortOrder sortKeyOrder = SortOrder.ASCENDING;
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableSpams.getModel());
        tableSpams.setRowSorter(sorter);
        
        if (query != "None") {
            if (query.equals("ID")) {
                sortKey = 0;
            } else if (query.equals("Name")) {
                sortKey = 1;
            } else if (query.equals("Time report")) {
                sortKey = 2;
            } else if (query.equals("Reported user")) {
                sortKey = 3;
            } else {
                sortKey = 4;
            }
        }
        
        if (queryOrder != "None") {
            if (queryOrder.equals("ASC")) {
                sortKeyOrder = SortOrder.ASCENDING;
            } else {
                sortKeyOrder = SortOrder.DESCENDING;
            }
        }
        
        List<RowSorter.SortKey> sortKeys = new ArrayList<>(25);
        sortKeys.add(new RowSorter.SortKey(sortKey, sortKeyOrder));
        sorter.setSortKeys(sortKeys);
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundSpams;
    private com.btv.newSwing.ComboboxCustom comboBoxOrderSpams;
    private com.btv.newSwing.ComboboxCustom comboBoxSpams;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane spamScrollPane;
    private com.btv.newSwing.TableCustom tableSpams;
    private javax.swing.JLabel titleSpams;
    // End of variables declaration//GEN-END:variables
}
